import org.apache.tools.ant.taskdefs.condition.Os
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeOutputKind

plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'

}

group 'com.epam'
version '0.0.1'

apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/kodein-framework/Kodein-DI" }
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url "https://kotlin.bintray.com/ktor" }
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://drill4j.bintray.com/nativewebsockets" }


}

def preset
if (Os.isFamily(Os.FAMILY_MAC)) preset = "macosX64"
if (Os.isFamily(Os.FAMILY_UNIX)) preset = "linuxX64"
if (Os.isFamily(Os.FAMILY_WINDOWS)) preset = "mingwX64"

def ex
if (Os.isFamily(Os.FAMILY_UNIX)) ex = "so"
else if (Os.isFamily(Os.FAMILY_WINDOWS)) ex = "dll"

def pref
if (Os.isFamily(Os.FAMILY_UNIX)) pref = "lib"
else if (Os.isFamily(Os.FAMILY_WINDOWS)) pref = ""


kotlin {
    targets {
        fromPreset(kotlin.presets[preset], 'nativeAgent')
        fromPreset(presets.jvm, 'javaAgent')
        configure([nativeAgent]) {
            compilations.main.outputKinds('DYNAMIC')
            compilations.main {
                cinterops {
                    drillInternal {

                    }
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.9.1"
                implementation(project(":drill-plugin-api:drill-agent-part"))
                implementation(project(":drill-common"))
            }
        }

        nativeAgentMain {
            dependencies {
                implementation("com.soywiz:korio:1.1.4-drill")
                implementation("com.soywiz:klogger:1.2.1")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.10.0"
                implementation(project(":drill-plugin-api:drill-agent-part"))

            }
        }
        javaAgentMain {
            dependencies {
                implementation("com.soywiz:klogger:1.2.1")
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
                implementation(project(":drill-common"))
                implementation(project(":drill-plugin-api:drill-agent-part"))

            }
        }
        javaAgentTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}
dependencies {
    nativeAgentMainImplementation project(":nativeprojects:drill-kni")
    nativeAgentMainImplementation project(":nativeprojects:drill-kasm")
    nativeAgentMainImplementation project(":nativeprojects:drill-jvmapi")
    nativeAgentMainImplementation project(":drill-common")
//    javaAgentMainApi(project(":drill-plugin-api:drill-agent-part"))
}


//task buildPlugin {
//    dependsOn(gradle.includedBuild("drill-exception-plugin-native").task(":buildNatvePlugin").resolveTask())
//    group = "application"
//}

javaAgentJar {
    destinationDirectory = file("../distr")
    archiveFileName = "drillRuntime.jar"
    from {
        configurations.javaAgentMainCompileOnly.forEach {
            println(it)
        }

        kotlin.targets['javaAgent'].compilations.main.compileDependencyFiles.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


task deleteAndCopyAgent {

    dependsOn "linkMainDebugSharedNativeAgent"
    doFirst {
        delete file("distr/${pref}main.$ex")
    }
    doLast {
        copy {
            from file("${kotlin.targets.nativeAgent.compilations.main.getBinary(NativeOutputKind.valueOf("DYNAMIC"), NativeBuildType.DEBUG)}")
            into file("../distr")
        }
        copy {
            from file("${kotlin.targets.nativeAgent.compilations.main.getBinary(NativeOutputKind.valueOf("DYNAMIC"), NativeBuildType.DEBUG)}")
            into file("../plugins/drill-exception-plugin-native/drill-api/$preset")
        }
//        copy {
//            from file("build/classes/kotlin/nativeCommon/main/drill4j-cinterop-jvmapi.klib")
//            into file("./plugins/drill-exception-plugin-native/drill-api/$preset")
//        }
//        copy {
//            from file("build/classes/kotlin/napi/main/drill4j.klib")
//            into file("./plugins/drill-exception-plugin-native/drill-api/$preset")
//        }
    }
}

task buildAgent {
    dependsOn metadataJar
    dependsOn javaAgentJar
    dependsOn deleteAndCopyAgent
    group = "application"

    doLast {
        if (!new File("../distr/configs", "drillConfig.json").exists()) {
            copy{
                from file("../resources/drillConfig.json")
                into file("../distr/configs")
            }
        }
     if (!new File("../distr/configs", "logger.properties").exists()) {
            copy{
                from file("../resources/logger.properties")
                into file("../distr/configs")
            }
        }
    }
}

task testGenerate {

    doFirst {
        kotlin.targets['javaAgent'].compilations.main.compileDependencyFiles.collect {
            it.isDirectory() ? it : zipTree(it)
        }.forEach {
            println it
        }
        com.epam.kjni.build.NativeBridgeGeneratorKt.generate(null, file("src/kjniMain/gen"))
    }
}